{"version":3,"sources":["file:///C:/Users/%EC%9D%B4%EC%A7%80%EC%95%88/Documents/GitHub/MergeCollect/assets/script/ObjectFactory.ts"],"names":["_decorator","Component","Prefab","NodePool","instantiate","ccclass","property","ObjectFactory","type","pools","Map","onLoad","_instance","start","initSetAll","prefabs","forEach","prefab","set","data","name","instance","poolName","get","pool","size","args","find"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,Q,OAAAA,Q;AAAgBC,MAAAA,W,OAAAA,W;;;;;;;;;OAClD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;+BAGjBO,a,WADZF,OAAO,CAAC,eAAD,C,UAGHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEN;AAAR,OAAD,C,sCAHb,MACaK,aADb,SACmCN,SADnC,CAC6C;AAAA;AAAA;;AAAA;;AAAA,eAMjCQ,KANiC,GAMzB,IAAIC,GAAJ,EANyB;AAAA;;AAQzCC,QAAAA,MAAM,GAAG;AACLJ,UAAAA,aAAa,CAACK,SAAd,GAA0B,IAA1B;AACH;;AAEDC,QAAAA,KAAK,GAAG;AACJ,eAAKC,UAAL;AACH;;AAEOA,QAAAA,UAAU,GAAG;AACjB,eAAKC,OAAL,CAAaC,OAAb,CAAsBC,MAAD,IAAY;AAC7BV,YAAAA,aAAa,CAACW,GAAd,CAAkBD,MAAM,CAACE,IAAP,CAAYC,IAA9B;AACH,WAFD;AAGH;;AAEkB,mBAARC,QAAQ,GAAkB;AACjC,iBAAOd,aAAa,CAACK,SAArB;AACH;;AAES,eAAHM,GAAG,CAACI,QAAD,EAAmB;AACzBf,UAAAA,aAAa,CAACc,QAAd,CAAuBZ,KAAvB,CAA6BS,GAA7B,CAAiCI,QAAjC,EAA2C,IAAInB,QAAJ,CAAamB,QAAb,CAA3C;AACH;;AAES,eAAHC,GAAG,CAACD,QAAD,EAAuC;AAC7C,cAAME,IAAI,GAAGjB,aAAa,CAACc,QAAd,CAAuBZ,KAAvB,CAA6Bc,GAA7B,CAAiCD,QAAjC,CAAb;;AACA,cAAIE,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,CAA1B,EAA6B;AAAA,8CAFDC,IAEC;AAFDA,cAAAA,IAEC;AAAA;;AACzB,mBAAOF,IAAI,CAACD,GAAL,CAASG,IAAT,CAAP;AACH,WAFD,MAEO;AACH,gBAAMT,MAAM,GAAGV,aAAa,CAACc,QAAd,CAAuBN,OAAvB,CAA+BY,IAA/B,CAAqCV,MAAD,IAAYA,MAAM,CAACG,IAAP,KAAgBE,QAAhE,CAAf;;AACA,gBAAIL,MAAJ,EAAY;AACR,qBAAOb,WAAW,CAACa,MAAD,CAAlB;AACH,aAFD,MAEO;AACH,qBAAO,IAAP;AACH;AACJ;AACJ;;AA1CwC,O,UAK1BL,S;;;;;iBAFa,E","sourcesContent":["import { _decorator, Component, Prefab, NodePool, Node, instantiate } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ObjectFactory')\nexport class ObjectFactory extends Component {\n\n    @property({ type: Prefab })\n    private prefabs: Prefab[] = [];\n\n    private static _instance: ObjectFactory;\n    private pools = new Map<string, NodePool>();\n\n    onLoad() {\n        ObjectFactory._instance = this;\n    }\n\n    start() {\n        this.initSetAll();\n    }\n\n    private initSetAll() {\n        this.prefabs.forEach((prefab) => {\n            ObjectFactory.set(prefab.data.name);\n        });\n    }\n\n    static get instance(): ObjectFactory {\n        return ObjectFactory._instance;\n    }\n\n    static set(poolName: string) {\n        ObjectFactory.instance.pools.set(poolName, new NodePool(poolName));\n    }\n\n    static get(poolName: string, ...args: any): Node {\n        const pool = ObjectFactory.instance.pools.get(poolName);\n        if (pool && pool.size() > 0) {\n            return pool.get(args);\n        } else {\n            const prefab = ObjectFactory.instance.prefabs.find((prefab) => prefab.name === poolName);\n            if (prefab) {\n                return instantiate(prefab);\n            } else {\n                return null;\n            }\n        }\n    }\n}\n\n"]}