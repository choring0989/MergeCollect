{"version":3,"sources":["file:///C:/Users/%EC%9D%B4%EC%A7%80%EC%95%88/Documents/GitHub/MergeCollect/assets/script/ObjectFactory.ts"],"names":["_decorator","Component","Prefab","NodePool","instantiate","ccclass","property","ObjectFactory","type","pools","Map","start","initSetAll","prefabs","forEach","prefab","set","name","instance","_instance","poolName","get","args","pool","size","find"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,Q,OAAAA,Q;AAAgBC,MAAAA,W,OAAAA,W;;;;;;;;;OAClD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;+BAGjBO,a,WADZF,OAAO,CAAC,eAAD,C,UAGHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEN;AAAR,OAAD,C,sCAHb,MACaK,aADb,SACmCN,SADnC,CAC6C;AAAA;AAAA;;AAAA;;AAAA,eAMjCQ,KANiC,GAMzB,IAAIC,GAAJ,EANyB;AAAA;;AAQzCC,QAAAA,KAAK,GAAG;AACJ,eAAKC,UAAL;AACH;;AAEOA,QAAAA,UAAU,GAAG;AACjB,eAAKC,OAAL,CAAaC,OAAb,CAAsBC,MAAD,IAAY;AAC7BR,YAAAA,aAAa,CAACS,GAAd,CAAkBD,MAAM,CAACE,IAAzB;AACH,WAFD;AAGH;;AAEkB,mBAARC,QAAQ,GAAkB;AACjC,iBAAOX,aAAa,CAACY,SAArB;AACH;;AAES,eAAHH,GAAG,CAACI,QAAD,EAAmB;AACzBb,UAAAA,aAAa,CAACW,QAAd,CAAuBT,KAAvB,CAA6BO,GAA7B,CAAiCI,QAAjC,EAA2C,IAAIjB,QAAJ,CAAaiB,QAAb,CAA3C;AACH;;AAES,eAAHC,GAAG,CAACD,QAAD,EAAmB,GAAGE,IAAtB,EAAqC;AAC3C,gBAAMC,IAAI,GAAGhB,aAAa,CAACW,QAAd,CAAuBT,KAAvB,CAA6BY,GAA7B,CAAiCD,QAAjC,CAAb;;AACA,cAAIG,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,CAA1B,EAA6B;AACzB,mBAAOD,IAAI,CAACF,GAAL,CAASC,IAAT,CAAP;AACH,WAFD,MAEO;AACH,kBAAMP,MAAM,GAAGR,aAAa,CAACW,QAAd,CAAuBL,OAAvB,CAA+BY,IAA/B,CAAqCV,MAAD,IAAYA,MAAM,CAACE,IAAP,KAAgBG,QAAhE,CAAf;;AACA,gBAAIL,MAAJ,EAAY;AACR,qBAAOX,WAAW,CAACW,MAAD,CAAlB;AACH,aAFD,MAEO;AACH,qBAAO,IAAP;AACH;AACJ;AACJ;;AAtCwC,O,UAK1BI,S,GAA2B,IAAIZ,OAAJ,E;;;;;iBAFd,E","sourcesContent":["import { _decorator, Component, Prefab, NodePool, Node, instantiate } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ObjectFactory')\nexport class ObjectFactory extends Component {\n\n    @property({ type: Prefab })\n    private prefabs: Prefab[] = [];\n\n    private static _instance: ObjectFactory = new ObjectFactory();\n    private pools = new Map<string, NodePool>();\n\n    start() {\n        this.initSetAll();\n    }\n\n    private initSetAll() {\n        this.prefabs.forEach((prefab) => {\n            ObjectFactory.set(prefab.name);\n        });\n    }\n\n    static get instance(): ObjectFactory {\n        return ObjectFactory._instance;\n    }\n\n    static set(poolName: string) {\n        ObjectFactory.instance.pools.set(poolName, new NodePool(poolName));\n    }\n\n    static get(poolName: string, ...args:any): Node{\n        const pool = ObjectFactory.instance.pools.get(poolName);\n        if (pool && pool.size() > 0) {\n            return pool.get(args);\n        } else {\n            const prefab = ObjectFactory.instance.prefabs.find((prefab) => prefab.name === poolName);\n            if (prefab) {\n                return instantiate(prefab);\n            } else {\n                return null;\n            }\n        }\n    }\n}\n\n"]}